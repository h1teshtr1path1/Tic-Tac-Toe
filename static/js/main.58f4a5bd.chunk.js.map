{"version":3,"sources":["components/Game.js","components/Square.js","App.js","reportWebVitals.js","index.js"],"names":["rowX","colX","dX","aX","rowO","colO","dO","aO","Game","props","n","size","i","push","initialise","_useState","useState","_useState2","Object","slicedToArray","Ans","setAns","useEffect","row","Math","floor","Index","col","Count","UpdateCheck","react_default","a","createElement","className","onClick","window","location","reload","Square","count","setCount","_useState3","_useState4","value","setValue","_useState5","_useState6","index","setIndex","Update","temp","newvalue","alert","cell","_loop","key","components_Game","App","src_components_Square","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.58f4a5bd.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport Square from './Square.css'\r\n\r\nlet rowX = [], colX = [] , dX = 0 , aX = 0\r\nlet rowO = [], colO = [] , dO = 0 , aO = 0\r\n\r\nconst Game = (props)=> {\r\n    \r\n    const n = props.size\r\n    function initialise(){\r\n        for(let i = 0;i<n;i++){\r\n            rowO.push(0)\r\n            colO.push(0)\r\n            rowX.push(0)\r\n            colX.push(0)\r\n        }\r\n    }\r\n    initialise();\r\n    const [Ans, setAns] = useState(\"\")\r\n    useEffect(()=>{\r\n        UpdateCheck()\r\n        // console.log(props.Index)\r\n    }, [props.Index])\r\n    \r\n\r\n    \r\n    function UpdateCheck(){\r\n        // console.log(props.Count)\r\n        let row = Math.floor(props.Index / n) , col = (props.Index%n) \r\n        if((props.Count)%2 === 1){\r\n            rowX[row] = rowX[row]+1\r\n            colX[col] = colX[col]+1\r\n            if(row===col)dX = dX+1\r\n            if(row+col === n)aX = aX+1\r\n            if(rowX[row]===n || colX[col]===n || dX===n || aX===n)setAns('X Wins!')\r\n        }\r\n        else if((props.Count)%2 === 0){\r\n            rowO[row] = rowO[row]+1\r\n            colO[col] = colO[col]+1\r\n            if(row===col)dO = dO+1\r\n            if(row+col === (n-1))aO = aO+1\r\n            if(rowO[row]===n || colO[col]===n || dO===n || aO===n)setAns('O Wins!')\r\n        }\r\n    }\r\n\r\n    function Refresh(){\r\n        \r\n        window.location.reload(false);\r\n    }\r\n  return (\r\n    <div>\r\n        <h3 className='Answer'>{Ans}</h3>\r\n        <button className='button' onClick={Refresh}>RESET</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game","import React , {useState} from 'react'\r\nimport style from './Square.css'\r\nimport Game from './Game'\r\n\r\n\r\n\r\nconst Square = (props)=> {\r\n    const size = props.size\r\n    const [count, setCount] = useState(0)\r\n    let [value, setValue] = useState([])\r\n    let [index, setIndex] = useState(-1)\r\n    // const [cell, setCell] = useState([])\r\n    function toggle() {\r\n        if(count%2 ===0)\r\n        return 'X';\r\n        return 'O';\r\n    }\r\n    function Update(temp){\r\n        if(value[temp-1]!=='O' && value[temp-1]!=='X'){\r\n            // console.log(temp)\r\n            setCount(count+1)\r\n            setIndex(temp)\r\n            let newvalue = value;\r\n            newvalue[temp-1] = toggle();\r\n            setValue(newvalue)\r\n        }\r\n        else alert(\"Invalid Move\")\r\n    }\r\n\r\n    //array for each cell in board of tic tac toe\r\n    var cell = []\r\n    function initialise(){\r\n        for(let i = 0;i<size*size;i++){\r\n            cell.push(<button key={i} className='row' onClick={()=>{\r\n                Update(i+1);\r\n            }}>{value[i]}</button>)\r\n        }\r\n    }\r\n    initialise();\r\n  return (\r\n    <div>\r\n        <div className='Box'>\r\n            {cell}\r\n        </div>\r\n        <Game Index = {index-1} Count = {count} size = {size}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Square","// import logo from './logo.svg';\nimport React from 'react'\nimport './App.css';\n// import Board from './components/Board';\n// import Game from './components/Game';\nimport Square from './components/Square';\n\nfunction App() {\n  var size = 5\n  return (\n    <div className=\"App\">\n      \n      <Square size = {size}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}