{"version":3,"sources":["components/Game.js","components/Square.js","App.js","reportWebVitals.js","index.js"],"names":["n","rowX","colX","dX","aX","rowO","colO","dO","aO","Game","props","_useState","useState","_useState2","Object","slicedToArray","Ans","setAns","useEffect","row","Math","floor","Index","col","Count","UpdateCheck","react_default","a","createElement","className","onClick","window","location","reload","Square","count","setCount","_useState3","_useState4","value","setValue","_useState5","_useState6","index","setIndex","Update","temp","newvalue","alert","components_Game","App","src_components_Square","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"qPAGMA,QAAI,GACNC,EAAO,CAAC,EAAG,EAAG,GAAIC,EAAO,CAAC,EAAG,EAAG,GAAKC,EAAK,EAAIC,EAAK,EACnDC,EAAO,CAAC,EAAG,EAAG,GAAIC,EAAO,CAAC,EAAG,EAAG,GAAKC,EAAK,EAAIC,EAAK,EAyCxCC,EAvCF,SAACC,GACV,IAAAC,EAAsBC,mBAAS,IAA/BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOK,EAAPH,EAAA,GAAYI,EAAZJ,EAAA,GA8BF,OA7BEK,oBAAU,YAOV,WAEI,IAAIC,EAAMC,KAAKC,MAAMX,EAAMY,MAAQtB,GAAKuB,EAAOb,EAAMY,MAAMtB,EACvDU,EAAMc,MAAO,IAAM,GACnBvB,EAAKkB,GAAOlB,EAAKkB,GAAK,EACtBjB,EAAKqB,GAAOrB,EAAKqB,GAAK,EACnBJ,IAAMI,IAAIpB,GAAQ,GAClBgB,EAAII,IAAQvB,IAAEI,GAAQ,GACtBH,EAAKkB,KAAOnB,GAAKE,EAAKqB,KAAOvB,GAAKG,IAAKH,GAAKI,IAAKJ,GAAEiB,EAAO,YAExDP,EAAMc,MAAO,IAAM,IACxBnB,EAAKc,GAAOd,EAAKc,GAAK,EACtBb,EAAKiB,GAAOjB,EAAKiB,GAAK,EACnBJ,IAAMI,IAAIhB,GAAQ,GAClBY,EAAII,IAASvB,EAAE,IAAGQ,GAAQ,GAC1BH,EAAKc,KAAOnB,GAAKM,EAAKiB,KAAOvB,GAAKO,IAAKP,GAAKQ,IAAKR,GAAEiB,EAAO,YArBjEQ,IAED,CAACf,EAAMY,QA2BVI,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUb,GACxBU,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASC,QAN/B,WACIC,OAAOC,SAASC,QAAO,KAKvB,WCmBOC,EAxDA,SAACxB,GACZ,IAAAC,EAA0BC,mBAAS,GAAnCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOwB,EAAPtB,EAAA,GAAcuB,EAAdvB,EAAA,GACAwB,EAAwBzB,mBAAS,IAAjC0B,EAAAxB,OAAAC,EAAA,EAAAD,CAAAuB,EAAA,GAAKE,EAALD,EAAA,GAAYE,EAAZF,EAAA,GACAG,EAAwB7B,oBAAU,GAAlC8B,EAAA5B,OAAAC,EAAA,EAAAD,CAAA2B,EAAA,GAAKE,EAALD,EAAA,GAAYE,EAAZF,EAAA,GAMA,SAASG,EAAOC,GACZ,GAAmB,MAAhBP,EAAMO,EAAK,IAA4B,MAAhBP,EAAMO,EAAK,GAAS,CAE1CV,EAASD,EAAM,GACfS,EAASE,GACT,IAAIC,EAAWR,EACfQ,EAASD,EAAK,GAVfX,EAAM,IAAK,EACP,IACA,IASHK,EAASO,QAERC,MAAM,gBAEjB,OACEtB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAAU,WAC9Be,EAAO,KACPN,EAAM,IACVb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAAU,WAC9Be,EAAO,KACPN,EAAM,IACVb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAAU,WAC9Be,EAAO,KACPN,EAAM,IACVb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAAU,WAC9Be,EAAO,KACPN,EAAM,IACVb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAAU,WAC9Be,EAAO,KACPN,EAAM,IACVb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAAU,WAC9Be,EAAO,KACPN,EAAM,IACVb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAAU,WAC9Be,EAAO,KACPN,EAAM,IACVb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAAU,WAC9Be,EAAO,KACPN,EAAM,IACVb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMC,QAAU,WAC9Be,EAAO,KACPN,EAAM,KAEdb,EAAAC,EAAAC,cAACqB,EAAD,CAAM3B,MAASqB,EAAM,EAAGnB,MAASW,MCxC1Be,MARf,WACE,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuB,EAAD,QCESC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDdY,IAASC,OACPxC,EAAAC,EAAAC,cAACF,EAAAC,EAAMwC,WAAP,KACEzC,EAAAC,EAAAC,cAACwC,EAAD,OAEFC,SAASC,eAAe,SAM1BlB","file":"static/js/main.126061ec.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport Square from './Square.css'\r\n\r\nconst n = 3\r\nlet rowX = [0, 0, 0], colX = [0, 0, 0] , dX = 0 , aX = 0\r\nlet rowO = [0, 0, 0], colO = [0, 0, 0] , dO = 0 , aO = 0\r\n\r\nconst Game = (props)=> {\r\n    const [Ans, setAns] = useState(\"\")\r\n    useEffect(()=>{\r\n        UpdateCheck()\r\n        // console.log(props.Index)\r\n    }, [props.Index])\r\n\r\n    \r\n    \r\n    function UpdateCheck(){\r\n        // console.log(props.Count)\r\n        let row = Math.floor(props.Index / n) , col = (props.Index%n) \r\n        if((props.Count)%2 === 1){\r\n            rowX[row] = rowX[row]+1\r\n            colX[col] = colX[col]+1\r\n            if(row===col)dX = dX+1\r\n            if(row+col === n)aX = aX+1\r\n            if(rowX[row]===n || colX[col]===n || dX===n || aX===n)setAns('X Wins!')\r\n        }\r\n        else if((props.Count)%2 === 0){\r\n            rowO[row] = rowO[row]+1\r\n            colO[col] = colO[col]+1\r\n            if(row===col)dO = dO+1\r\n            if(row+col === (n-1))aO = aO+1\r\n            if(rowO[row]===n || colO[col]===n || dO===n || aO===n)setAns('O Wins!')\r\n        }\r\n    }\r\n\r\n    function Refresh(){\r\n        window.location.reload(false);\r\n    }\r\n  return (\r\n    <div>\r\n        <h3 className='Answer'>{Ans}</h3>\r\n        <button className='button' onClick={Refresh}>RESET</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game","import React , {useState} from 'react'\r\nimport style from './Square.css'\r\nimport Game from './Game'\r\n\r\nconst Square = (props)=> {\r\n    const [count, setCount] = useState(0)\r\n    let [value, setValue] = useState([])\r\n    let [index, setIndex] = useState(-1)\r\n    function toggle() {\r\n        if(count%2 ===0)\r\n        return 'X';\r\n        return 'O';\r\n    }\r\n    function Update(temp){\r\n        if(value[temp-1]!=='O' && value[temp-1]!=='X'){\r\n            // console.log(temp)\r\n            setCount(count+1)\r\n            setIndex(temp)\r\n            let newvalue = value;\r\n            newvalue[temp-1] = toggle();\r\n            setValue(newvalue)\r\n        }\r\n        else alert(\"Invalid Move\")\r\n    }\r\n  return (\r\n    <div>\r\n        <div className='Box'>\r\n            <button className='row' onClick= {()=>{\r\n                Update(1);\r\n            }}>{value[0]}</button>\r\n            <button className='row' onClick= {()=>{\r\n                Update(2);\r\n            }}>{value[1]}</button>\r\n            <button className='row' onClick= {()=>{\r\n                Update(3);\r\n            }}>{value[2]}</button>\r\n            <button className='row' onClick= {()=>{\r\n                Update(4);\r\n            }}>{value[3]}</button>\r\n            <button className='row' onClick= {()=>{\r\n                Update(5);\r\n            }}>{value[4]}</button>\r\n            <button className='row' onClick= {()=>{\r\n                Update(6);\r\n            }}>{value[5]}</button>\r\n            <button className='row' onClick= {()=>{\r\n                Update(7);\r\n            }}>{value[6]}</button>\r\n            <button className='row' onClick= {()=>{\r\n                Update(8);\r\n            }}>{value[7]}</button>\r\n            <button className='row' onClick= {()=>{\r\n                Update(9);\r\n            }}>{value[8]}</button>\r\n        </div>\r\n        <Game Index = {index-1} Count = {count}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Square","// import logo from './logo.svg';\nimport React from 'react'\nimport './App.css';\nimport Board from './components/Board';\nimport Game from './components/Game';\nimport Square from './components/Square';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Square/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}